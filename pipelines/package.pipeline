def VERSION_STRING = "undefined"
def BUILD_DIR = "undefined"

pipeline {
     agent {
                label 'pizero'
            }

    stages {
        stage('Clone Source') {
            steps {
                deleteDir()
                checkout([
	                $class: 'GitSCM', 
	                branches: [[name: '*/main']], 
	                doGenerateSubmoduleConfigurations: false, 
	                extensions: [
	                	[
	                		$class: 'CloneOption', 
	                		depth: 1, 
			                noTags: false, 
			                reference: '', 
			                shallow: true
		                ], 
	                	[
	                		$class: 'RelativeTargetDirectory', 
	                		relativeTargetDir: 'jack-capture'
                		]
                	], 
	                submoduleCfg: [], 
	                userRemoteConfigs: [
	                	[
	                		credentialsId: 'pizero-build', 
	                		url: 'git@github.com:Claudenw/jack_capture_cuimhne.git'
	                	]
                	]
                ])
                
                checkout([
                	$class: 'GitSCM', 
                	branches: [[name: '*/main']], 
                	doGenerateSubmoduleConfigurations: false, 
                	extensions: [
                		[
                			$class: 'CloneOption', 
                			depth: 1, 
			                noTags: false, 
			                reference: '', 
			                shallow: true
		                ], 
                		[
                			$class: 'RelativeTargetDirectory', 
                			relativeTargetDir: 'jack-capture-pkg'
            			]
        			], 
                	submoduleCfg: [], 
                	userRemoteConfigs: [
                		[
                			credentialsId: 'pizero-build', 
                			url: 'git@github.com:Claudenw/jack_capture_cuimhne-pkg.git'
            			]
        			]
    			])
    			script {
				    env.VERSION_STRING  = sh(script:'grep "^VERSION=" jack-capture/Makefile | cut -f2 -d=', returnStdout: true).trim()
				    env.BUILD_DIR="jack-capture-i2c-${env.VERSION_STRING}"
				    echo "Building ${env.VERSION_STRING } in ${env.BUILD_DIR }"
				   
				}
            }
        }
        stage( "Build jack-capture-cuimhne" ) {
            steps {
                dir ("jack-capture" ) {
                    sh '''
                    mkdir ../${BUILD_DIR}
                    make install DESTDIR=../${BUILD_DIR}/exec PREFIX=/usr
                    '''
                }
            }
        }
        stage( "Prepare jack-capture-cuimhne packaging" ) {
            steps {
                dir ("jack-capture-pkg") {
                    sh '''
                    sed -i "s/Version:.*/Version: ${VERSION_STRING}/g" debian/control
                    rsync -rp debian ../${BUILD_DIR}
                    cp -p Makefile ../${BUILD_DIR}
                    '''
                }
	        }
        }
        stage( "Package jack-capture-i2c" ) {
            steps {
               	dir( "${env.BUILD_DIR}" ) {
	                sh '''
	                dh clean
	                dh build
	                fakeroot dh binary
	                '''
                }
	        }
            post {
                success {
                    archiveArtifacts artifacts: 'jack-capture-*.deb', followSymlinks: false, onlyIfSuccessful: true    
                    build job: 'Package_Index', parameters: [string(name: 'project', value: 'jack_capture-pkg'), string(name: 'files', value: '*.deb')]
                }
            }
        }
    }
}
